#pragma kernel CSParticle

// included file for generating perlin noise on the gpu instead of needing to 
// generate it on the cpu and pass it theoretically holding up the usage or creating a 
// messy inconsistent noise. Pulled from a git repo commented in that code
#include "ClassicNoise3D.hlsl"

 // Particle's data
struct Particle
{
	float3 position;
	float3 SpawnPos;
	float3 velocity;
	float life;
	float3 Normal;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

// Variables set from the CPU
float deltaTime;
float3 newPos;
float3 normals;
float totalTime;
float3 ObjPos;


uint rng_state;


// from the original example
uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

// https://github.com/cabbibo/glsl-curl-noise/blob/master/curl.glsl
float3 cnoiseVec3(float3 x) {

	float s = cnoise(x);
	float s1 = cnoise(float3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
	float s2 = cnoise(float3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
	float3 c = float3(s, s1, s2);
	return c;
}
 

[numthreads(256, 1, 1)]
void CSParticle(uint3 id : SV_DispatchThreadID)
{
	// subtract the life based on deltaTime
	particleBuffer[id.x].life -= deltaTime;

	
	float3 noise= cnoiseVec3(particleBuffer[id.x].position)/50;
	particleBuffer[id.x].SpawnPos += newPos;
	particleBuffer[id.x].velocity =  float3(noise.x,abs(noise.y),noise.z)*abs(particleBuffer[id.x].life-2.5) +float3(sin(totalTime)/50,.01,0);//float3(snoise(particleBuffer[id.x].position*.01),abs(snoise(particleBuffer[id.x].SpawnPos*.01)),0);//+float3(0,.01,.0);


	if(particleBuffer[id.x].life > 1.1f)
		particleBuffer[id.x].velocity = float3(particleBuffer[id.x].velocity.x / 3, particleBuffer[id.x].velocity.y, particleBuffer[id.x].velocity.z / 3);

	particleBuffer[id.x].position+= particleBuffer[id.x].velocity;

	if (particleBuffer[id.x].life < 0)
	{
	// {
	// 	// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
	 	rng_state = id.x;
	 	float f0 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
	 	float f1 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
	 	float f2 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
	 	float3 normalF3 = normalize(float3(f0, f1, f2)) * 0.8f;
	 	normalF3 *= float(rand_xorshift()) * (1.0 / 4294967296.0);

		// reset particle lifes
	 	particleBuffer[id.x].life = 2;
		// place particle at its new spawn position if the fire has moved plus the random offsets
		 particleBuffer[id.x].position=particleBuffer[id.x].SpawnPos+float3(normalF3.x/10 + newPos.x, normalF3.y/10 + newPos.y, normalF3.z/10 + newPos.z);;
	
	}

}